{
  "form-create": {
    "prefix": "form-create",
    "body": [
      "<template>",
      "  <n-button @click=\"showModal = true\" size=\"large\" type=\"primary\"",
      "    >Добавить</n-button",
      "  >",
      "  <n-modal v-model:show=\"showModal\">",
      "    <n-card",
      "      style=\"width: 600px\"",
      "      :bordered=\"false\"",
      "      size=\"huge\"",
      "      role=\"dialog\"",
      "      aria-modal=\"true\"",
      "    >",
      "      <m-h2 class=\"green-field tw-text-center\">{{ $t(\"${4:example}\") }}{{ $t(\"${5:(новый)}\") }}</m-h2>",
      "      <${1:example}",
      "        @validForm=\"handleClick\"",
      "        :isLoad=\"isPending\"",
      "        ref=\"formref\"",
      "      />",
      "    </n-card>",
      "  </n-modal>",
      "</template>",
      "",
      "<script setup>",
      "import ${1:example} from \"./${1:example}.vue\";",
      "import { useQueryClient } from \"@tanstack/vue-query\";",
      "import { ref } from \"vue\";",
      "const showModal = ref();",
      "const formref = ref();",
      "const queryClient = useQueryClient();",
      "",
      "const { mutate, isPending } = ${2:example}({",
      "  onSuccess: (data) => {",
      "    showModal.value = false;",
      "    queryClient.invalidateQueries([\"${3:example}\"]);",
      "  },",
      "  onError: (data) => {",
      "    formref.value.errorsRef = data.msgObject;",
      "    formref.value.formRef.validate();",
      "  },",
      "});",
      "const handleClick = (data) => {",
      "  mutate({ ...data.value });",
      "};",
      "</script>",
      "",
      "<style lang=\"scss\" scoped></style>",
      ""
    ],
    "description": "form-create"
  },
  "form-default": {
    "prefix": "form-default",
    "body": [
      "<template>",
      "",
      "  <n-form ref=\"formRef\" size=\"large\" :model=\"formValue\" :rules=\"rules\">",
      "   ",
      "    <n-button",
      "      :loading=\"props.isLoad\"",
      "      type=\"primary\"",
      "      size=\"large\"",
      "      @click=\"handleValidateClick\"",
      "    >",
      "      {{ isUpdate ? \"Сохранить\" : \"Добавить\" }}",
      "    </n-button>",
      "  </n-form>",
      "  <!-- {{ formValue }} -->",
      "</template>",
      "",
      "<script setup>",
      "import { computed, ref, watch } from \"vue\";",
      "",
      "import {",
      "  validatorsRules,",
      "  validateApiErrorsFunc,",
      "  validateNumber,",
      "  validateRequired,",
      "  requiredRules,",
      "} from \"@/helper/defaultRules\";",
      "",
      "import {",
      "  formValueValidName,",
      "  formValueInValidName,",
      "} from \"@/helper/constants/constantEmits\";",
      "",
      "const formRef = ref();",
      "const errorsRef = ref();",
      "const props = defineProps({ formValue: { type: Object }, isLoad: Boolean });",
      "const formValueLocal = ref({});",
      "const emit = defineEmits([formValueValidName]);",
      "const formValue = computed(() => {",
      "  if (typeof props.formValue == \"object\") {",
      "    return props.formValue;",
      "  }",
      "  return formValueLocal.value;",
      "});",
      "const isUpdate = computed(() => {",
      "  if (typeof props.formValue == \"object\") {",
      "    return true;",
      "  }",
      "  return false;",
      "});",
      "const rules = computed(() => {",
      "  const defaultRules = {",
      "   ",
      "  };",
      "  if (isUpdate.value) {",
      "  ",
      "  }",
      "  return defaultRules;",
      "});",
      "",
      "const handleValidateClick = () => {",
      "  formRef.value?.validate(async (errors) => {",
      "    // console.log(formData);",
      "    const copyFormValue = { ...formValue.value };",
      "",
      "    if (!errors) {",
      "      emit(formValueValidName, formValue, props.isLoad, copyFormValue);",
      "    } else {",
      "      emit(formValueInValidName, formValue, props.isLoad, copyFormValue);",
      "    }",
      "  });",
      "};",
      "defineExpose({ formRef, formValue, errorsRef });",
      "</script>",
      "",
      "<style lang=\"scss\" scoped></style>",
      ""
    ],
    "description": "form-default"
  },

  "form-update": {
    "prefix": "form-update",
    "body": [
      "<template>",
      "  <n-modal v-model:show=\"showModal\">",
      "    <n-card",
      "      style=\"width: 600px\"",
      "      :bordered=\"false\"",
      "      size=\"huge\"",
      "      role=\"dialog\"",
      "      aria-modal=\"true\"",
      "    >",
      "      <m-h2 class=\"green-field tw-text-center\">{{ $t(\"${4:example}\") }}{{ $t(\"${5:(изменение)}\") }}</m-h2>",
      "      <${1:example}",
      "        @validForm=\"handleClick\"",
      "        :formValue=\"props.row\"",
      "        :isLoad=\"isPending\"",
      "        ref=\"formref\"",
      "      />",
      "    </n-card>",
      "  </n-modal>",
      "</template>",
      "",
      "<script setup>",
      "import ${1:example} from \"./${1:example}.vue\";",
      "import { useQueryClient } from \"@tanstack/vue-query\";",
      "import { ref } from \"vue\";",
      "const showModal = ref();",
      "const formref = ref();",
      "const queryClient = useQueryClient();",
      "const props = defineProps({",
      "  row: Object,",
      "});",
      "const { mutate, isPending } = ${3:example}({",
      "  onSuccess: (data) => {",
      "    showModal.value = false;",
      "    queryClient.invalidateQueries([\"${2:example}\"]);",
      "  },",
      "  onError: (data) => {",
      "    formref.value.errorsRef = data.msgObject;",
      "    formref.value.formRef.validate();",
      "  },",
      "});",
      "const handleClick = (data) => {",
      "  mutate({",
      "    ...data.value,",
      "  });",
      "};",
      "defineExpose({ showModal });",
      "</script>",
      "",
      "<style lang=\"scss\" scoped></style>",
      ""
    ],
    "description": "form-update"
  },
  "vue-query": {
    "prefix": "vue-query",
    "body": [
      "import { useQuery, useMutation, useQueryClient } from '@tanstack/vue-query';",
      "",
      "const selectFn = {",
      "  all: (data) => data,",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = (selectDataKey = 'all') => {",
      "  return useQuery({",
      "    queryKey: ['${1:queryKey}'],",
      "    queryFn: () => {},",
      "    select(data) {",
      "      return selectFn[selectDataKey](data);",
      "    },",
      "  });",
      "};",
      "",
      "export const ${TM_FILENAME_BASE}Mutate = (params) => {",
      "const queryClient = useQueryClient();",
      "  return useMutation({",
      "    mutationFn: (data) => {},",
      "    onSuccess: () => {",
      "      queryClient.invalidateQueries(['${2:queryKey}']);",
      "    }",
      "  });",
      "};"
    ],
    "description": "field query tanstack"
  },
  "vue-pinia": {
    "prefix": "vue-pinia",
    "body": [
      "import { defineStore, acceptHMRUpdate } from 'pinia'",
      "",
      "export const ${TM_FILENAME_BASE} = defineStore('${0|store}', () => {",
      " ${1}",
      " return {}",
      "})"
    ],
    "description": "Pinia bolerplate code"
  }
}
