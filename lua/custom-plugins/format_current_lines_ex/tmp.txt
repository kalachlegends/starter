  def gen_only_items(state, attrs) do
    offset = attrs[:offset] || 0
    params = attrs[:params] || %{} 
  
    lot_ids = params["lots_ids"]

    state["lots"]
    |> Enum.filter(fn {lot_id, _} -> (is_list(lot_id) and lot_ids in params["lots_ids"]) or (lot_id == params["lot"] or is_nil(params["lot"])) end)
    |> Enum.reduce([], fn {lot_id, lot}, acc ->
      Enum.map(lot["items"], fn {item_id, item} ->
        %{
          "lot_id" => lot_id,
          "item_id" => item_id,
          "id" => item_id,
          "fields" => gen_item(item, [lot_id: lot_id, item_id: item_id, item: item, original_state: state] ++ Keyword.take(attrs, [:auth_data, :part_id, :offset]))
        }
      end) ++ acc
    end)

    off = params["off"] || params["offset"]
    lim = params["lim"] || params["limit"]

    if is_nil(off) or is_nil(lim) do
      items
    else
      Enum.slice(items, off, lim)
    end
  end